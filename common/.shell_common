#!/usr/bin/env bash
#
#

# Return true or false if we are on BDAP
is_bdap() {
  grep -q jeodpp /etc/hostname || [[ -d /etc/jeodpp ]]
}

# https://stackoverflow.com/questions/54913218/detect-whether-running-on-azure-iaas-vm-net-application
# https://stackoverflow.com/questions/50629815/quickly-detect-if-vm-is-running-on-azure
# https://learn.microsoft.com/en-us/azure/security/fundamentals/azure-domains
is_azure () {
  grep -q cloudapp /etc/resolv.conf
}

is_meluxina() {
  hostname -d | grep -q meluxina.lxp.lu
}

# setup micromamba
if [[ -x "$(command -v micromamba)" ]]; then
  MAMBA_EXE=$(which micromamba)
  if is_bdap; then
    MAMBA_ROOT_PREFIX="${MAMBA_ROOT_PREFIX:-/scratch/$(whoami)/.micromamba}"
  elif is_azure; then
    MAMBA_ROOT_PREFIX="${MAMBA_ROOT_PREFIX:-/mnt/micromamba}"
  elif is_meluxina; then
    MAMBA_ROOT_PREFIX="${MAMBA_ROOT_PREFIX:-/project/home/p200232/.micromamba}"
  else
    MAMBA_ROOT_PREFIX="${MAMBA_ROOT_PREFIX:-"${HOME}"/.micromamba}"
  fi
  mkdir -p "${MAMBA_ROOT_PREFIX}"
  if [[ $- == *i* ]]; then
    echo "mamba exe at   : ${MAMBA_EXE}"
    echo "mamba prefix at: ${MAMBA_ROOT_PREFIX}"
  fi
  export MAMBA_EXE
  export MAMBA_ROOT_PREFIX
  eval "$(micromamba shell hook)"
  # Micromamba is not installing the conda and the mamba binaries,
  # so if we don't have them, let's pretend that we have them!
  if [[ ! -x "$(command -v conda)" ]]; then
    conda() { micromamba "${@}"; }
  fi
  if [[ ! -x "$(command -v mamba)" ]]; then
    mamba() { micromamba "${@}"; }
  fi
  micromamba deactivate
fi

# Browser
if [ -x "$(command -v firefox)" ]; then
  export BROWSER='firefox'
fi

#
# Editors
#
if [ -x "$(command -v nvim-qt)" ]; then
  # If we have nvim-qt we assume that `nvim` is also available so let's use them
  alias vim='nvim'
  alias gvim='nvim-qt'
  export EDITOR='nvim'
  export SYSTEMD_EDITOR='nvim'
  export VISUAL='nvim-qt'
elif [ -x "$(command -v nvim)" ]; then   # Prefer nvim-qt over gvim
  # we only have neovim (probably on a server or something. so use just neovim
  alias vim='nvim'
  alias gvim='nvim'
  export EDITOR='nvim'
  export SYSTEMD_EDITOR='nvim'
  export VISUAL='nvim'
elif [ -x "$(command -v gvim)" ]; then   # Prefer nvim-qt over gvim
  # It seems we don't have nvim at all. Since we have gvim let's use it
  export EDITOR='vim'
  export SYSTEMD_EDITOR='vim'
  export VISUAL='gvim'
else
  # It seems we don't even have gvim. Let's use plain vim
  alias gvim='vim'
  export EDITOR='vim'
  export SYSTEMD_EDITOR='vim'
  export VISUAL='vim'
fi


# Pager
if [ -x "$(command -v less)" ]; then
  export PAGER='less'
  export LESSCHARSET='utf-8'
  export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
                  # Use this if lesspipe.sh exists.
  export LESS='-i -w -z-4 -g -e -M -X -F -R -P%t?f%f \
  :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'

  # LESS man page colors (makes Man pages more readable).
  export LESS_TERMCAP_mb=$'\E[01;31m'
  export LESS_TERMCAP_md=$'\E[01;31m'
  export LESS_TERMCAP_me=$'\E[0m'
  export LESS_TERMCAP_se=$'\E[0m'
  export LESS_TERMCAP_so=$'\E[01;44;33m'
  export LESS_TERMCAP_ue=$'\E[0m'
  export LESS_TERMCAP_us=$'\E[01;32m'
fi

# XDG BASE directories
# https://wiki.archlinux.org/index.php/XDG_Base_Directory
XDG_CONFIG_HOME=$HOME/.config
if is_azure; then
  XDG_CACHE_HOME=/mnt/cache
elif is_bdap; then
  XDG_CACHE_HOME=/scratch/"$(whoami)"/cache
else
  XDG_CACHE_HOME="${HOME}"/.cache
fi
XDG_DATA_HOME=$HOME/.local/share
XDG_RUNTIME_DIR=/var/run/user/$(id -u)
mkdir -p "${XDG_DATA_HOME}" "${XDG_CACHE_HOME}" "${XDG_CONFIG_HOME}"
export XDG_CONFIG_HOME
export XDG_CACHE_HOME
export XDG_DATA_HOME
export XDG_RUNTIME_DIR

export PYTHONSTARTUP=~/.pythonrc.py

# Ipython and Jupyter
# Both projects have decided not to follow XDG.
# To circumvent this we need to add some ENV variables
# https://ipython.readthedocs.io/en/7.2.0/development/config.html#configuration-file-location
# https://github.com/jupyter/notebook/issues/1355#
export IPYTHONDIR=${XDG_CONFIG_HOME:-$HOME/.config}/ipython
export JUPYTER_CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/jupyter
# JUPYTERLAB_DIR defines where jupyter extensions are being installed.
export JUPYTERLAB_DIR=${JUPYTER_CONFIG_DIR}/lab/

# Go and R
export GOPATH=~/Prog/go
export GOBIN=~/Prog/go/bin
export GOARCH=amd64
export GOOS=linux
export R_LIBS="$HOME/.R"
export JAVA_OPTS="-Xmx2048M -Xms32M"

GPG_TTY=$(tty)
export GPG_TTY

# docker
alias dc='docker'
alias dcc='docker container'
alias dci='docker image'
alias dcv='docker volume'
alias dcn='docker network'
alias dcmp='docker-compose'

# python
alias i3="ipython"
alias jl="jupyter-lab"

# git
alias gco='git checkout'
alias gs='git stash'
alias gsa='git stash apply'
alias gsx='git stash drop'
alias gsl='git stash list'

#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls).
#-------------------------------------------------------------
# Add colors for filetype and  human-readable sizes by default on 'ls':
alias ls='ls -h --color --group-directories-first'
alias lx='ls -lXB'         #  Sort by extension.
alias lk='ls -lSr'         #  Sort by size, biggest last.
alias lt='ls -ltr'         #  Sort by date, most recent last.
alias lc='ls -ltcr'        #  Sort by/show change time,most recent last.
alias lu='ls -ltur'        #  Sort by/show access time,most recent last.

# The ubiquitous 'll': directories first, with alphanumeric sorting:
alias ll="ls -lv --group-directories-first"
alias lr='ll -R'           #  Recursive ls.
alias la='ll -A'           #  Show hidden files.
alias tree='tree -C'       #  Nice alternative to 'recursive ls' ...

# Make some of the file manipulation programs verbose
alias mv="mv -vi"
alias rm="rm -vi"
alias cp="cp -vi"

alias f="find ./ -name"

alias more='less'
alias grep='grep --color=auto'
alias grepp='grep -P --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ping1='ping -c3 1.1.1.1'
alias ping8='ping -c3 8.8.8.8'
alias pingg='ping -c3 www.google.com'

alias gtar='tar pcvzf'
alias btar='tar pcvjf'
alias untar='tar xvf'
alias ungtar='tar xvzf'
alias unbtar='tar xvjf'

# Journalctl aliases
alias jctl='journalctl'
alias jspy='jctl -f'

# Systemctl aliases
alias reload='sudo systemctl reload'
alias restart='sudo systemctl restart'
alias sctl='sudo systemctl'
alias start='sudo systemctl start'
alias status='sudo systemctl -l status'
alias stop='sudo systemctl stop'

# Systemctl user aliases
alias udisable='systemctl --user disable'
alias uenable='systemctl --user enable'
alias ureload='systemctl --user reload'
alias urestart='systemctl --user restart'
alias usctl='systemctl --user'
alias ustart='systemctl --user start'
alias ustatus='systemctl --user status'
alias ustop='systemctl --user stop'

# Setup .dircolors
if [ -s "$HOME/.dir_colors" ]; then
  eval "$(dircolors -b "$HOME"/.dir_colors)"
fi

# Ruby
if [[ -x "$(command -v ruby)" ]]; then
  GEM_HOME=$(ruby -e 'puts Gem.user_dir')
  export GEM_HOME
  export PATH="${PATH}":"${GEM_HOME}"/bin
fi

# ansible
if [ -x "$(command -v ansible)" ]; then
    alias ap="ansible-playbook"
fi


# NTFY notifications
if [ -x "$(command -v ntfy)" ]; then
    eval "$(ntfy shell-integration)"
    export AUTO_NTFY_DONE_IGNORE="vim nvim gvim screen tmux"
fi

# Common fzf configuration
if [ -x "$(command -v fzf)" ]; then
  # configure
  if [ -x "$(command -v bat)" ]; then
    export FZF_DEFAULT_OPTS="--height 40% --reverse --border --preview 'bat --color=always --line-range :100 {}'"
  else
    export FZF_DEFAULT_OPTS="--height 40% --reverse --border --preview 'head -n100 {}'"
  fi
  # Use fd if it is available and fallback to ag
  if [ -x "$(command -v fd)" ]; then
    export FZF_DEFAULT_COMMAND='fd --type f --color=never --hidden --follow --exclude .git --exclude .tox'
    export FZF_ALT_C_COMMAND='fd --type d --color=never --hidden --follow --exclude .git --exclude .tox'
  elif [ -x "$(command -v ag)" ]; then
    export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git --ignore .tox -g ""'
  fi
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  # aliases
  alias vv='gvim $(fzf)'
fi

# kubernetes
if [ -x "$(command -v minikube)" ]; then
    alias mk="minikube"
fi
if [ -x "$(command -v kubectl)" ]; then
    source <(kubectl completion "${0}");
    alias kc="kubectl"
    alias kcg="kubectl get"
    alias kcl="kubectl list"
    alias kcd="kubectl describe"
    alias kkc="kubectl --namespace kube-system"
    alias kkcg="kubectl --namespace kube-system get"
    alias kkcl="kubectl --namespace kube-system list"
    alias kkcd="kubectl --namespace kube-system describe"
fi
if [ -x "$(command -v kubeadm)" ]; then
    alias ka="kubeadm"
fi

if [ -x "$(command -v terraform)" ]; then
    alias tf='terraform'
fi
if [ -x "$(command -v terraform)" ]; then
    alias tg='terragrunt'
fi
if [ -x "$(command -v terraspace)" ]; then
    alias trs='terraspace'
fi

# virsh
if [ -x "$(command -v virsh)" ]; then
    alias vrs="virsh --connect qemu:///system"
fi

# ffind
if [ -x "$(command -v ffind)" ]; then
    alias ff='ffind'
fi

# lock screen
if [ -x "$(command -v gnome-screensaver-command)" ]; then
  alias lock='gnome-screensaver-command -l'
fi

# kitty
if [ "$TERM" = "xterm-kitty" ]; then
  alias ssh="kitty +kitten ssh"
fi

# Various
alias cputemp="watch -n 1 -d sensors"
alias qg='qgit --all'
alias rmtex="find . -type f \( -name '*.aux' -o -name '*.glo' -o -name '*.idx' -o -name '*.log' -o -name '*.toc' -o -name '*.ist' -o -name '*.acn' -o -name '*.acr' -o -name '*.alg' -o -name '*.bbl' -o -name '*.blg' -o -name '*.dvi' -o -name '*.glg' -o -name '*.gls' -o -name '*.ilg' -o -name '*.ind' -o -name '*.lof' -o -name '*.lot' -o -name '*.maf' -o -name '*.mtc' -o -name '*.thm' -o -name '*.nav' -o -name '*.snm' -o -name '*.out' -o -name '*.synctex.gz' -o -name '*.mtc1' -name '*.bcf' -name '*.fls' -name '*.run.xml' \) -delete"
alias calendar="python -m calendar"

enable_aslr() {
  echo 2 | sudo tee /proc/sys/kernel/randomize_va_space
}

enable_smt() {
  # Enable SMT - https://access.redhat.com/solutions/rhel-smt
  echo on | sudo tee /sys/devices/system/cpu/smt/control
}

disable_aslr() {
  echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
}

disable_smt() {
  # Disable SMT - https://access.redhat.com/solutions/rhel-smt
  echo off | sudo tee /sys/devices/system/cpu/smt/control
}

enable_benchmarking() {
  enable_aslr
  enable_smt
  # echo 0 | sudo tee /sys/devices/system/cpu/cpufreq/boost
  # https://askubuntu.com/a/318476/893808
  # echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
  # export PYTHONHASHSEED=123
}

disable_benchmarking() {
  disable_aslr
  disable_smt
  # echo 1 | sudo tee /sys/devices/system/cpu/cpufreq/boost
  # https://askubuntu.com/a/318476/893808
  # echo 2 | sudo tee /proc/sys/kernel/randomize_va_space
  # unset PYTHONHASHSEED
}
