#!/usr/bin/env python


import argparse
import json
import pathlib
import shlex
import subprocess
import sys

CWD = pathlib.Path.cwd()

ENVRC = """
#!/usr/bin/env bash

set -e

eval "$(micromamba shell hook --shell bash)"
micromamba activate {name}

if [ ! -d ./.venv ]; then
  $CONDA_PREFIX/bin/python -mvenv .venv
fi
source .venv/bin/activate

if [ ! -f pyproject.toml ]; then
  poetry init -n
fi

if [ ! -d .git ]; then
  git init
fi

if [ ! -f .gitignore ]; then
  add_pygitignore
fi
"""


def parse_args():
    parser = argparse.ArgumentParser(description="Setup .envrc")
    parser.add_argument(
        "name",
        nargs="?",
        help="The name of the conda environment. Defaults to the name of the current directory.",
        default=CWD.name,
    )
    parser.add_argument(
        "-p",
        "--python-version",
        help="The version of the python version to use in the conda env",
        default="3.12",
    )
    args = parser.parse_args()
    return args


def get_existing_conda_environment_names() -> set[str]:
    proc = subprocess.run(
        shlex.split("micromamba env list --json"),
        capture_output=True,
        text=True,
        check=True,
    )
    envs = json.loads(proc.stdout)["envs"][1:]
    names = {pathlib.Path(env).name for env in envs}
    return names


def create_conda_env(name: str, python_version: str) -> None:
    subprocess.run(
        shlex.split(
            f"micromamba env create --yes --name {name} --offline python={python_version}"
        ),
        check=True,
    )


def create_envrc(name: str):
    contents = ENVRC.format(name=name)
    (CWD / ".envrc").write_text(contents)


def main() -> None:
    args = parse_args()
    print(args)
    existing_conda_names = get_existing_conda_environment_names()
    if args.name in existing_conda_names:
        msg = f"A Conda environment named '{args.name}' already exists. Please choose a different one"
        sys.exit(msg)
    create_conda_env(args.name, args.python_version)
    create_envrc(args.name)
    print()


if __name__ == "__main__":
    main()
